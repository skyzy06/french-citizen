{
	"info": {
		"_postman_id": "5eac8f1a-93fb-4224-b080-f7a643363d55",
		"name": "French Citizen",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CRUD test",
			"item": [
				{
					"name": "Create johnny",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"if(pm.response.code === 201){\r",
									"    const userId = pm.response.headers.get('location').split('/')[2];\r",
									"    const requestBody = JSON.parse(request.data);\r",
									"    pm.variables.set('userId', userId);\r",
									"    pm.variables.set('username', requestBody.username);\r",
									"    pm.variables.set('password', requestBody.password);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"johnny\",\r\n    \"residenceCountry\": \"France\",\r\n    \"birthdate\": \"1992-10-01\",\r\n    \"password\": \"Azertyui1\",\r\n    \"gender\": \"M\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get token for johnny",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(pm.response.code === 200){\r",
									"    pm.variables.set(\"userJwtToken\", pm.response.text());\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen/token",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find johnny",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Citizen is Johnny\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.username).to.eql(\"johnny\");\r",
									"    pm.expect(responseJson.birthdate).to.eql(\"1992-10-01\");\r",
									"    pm.expect(responseJson.residenceCountry).to.eql(\"France\");\r",
									"    pm.expect(responseJson.gender).to.eql(\"M\");\r",
									"    pm.expect(responseJson.firstname).to.be.null;\r",
									"    pm.expect(responseJson).to.not.have.property('password');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userJwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostUrl}}/citizen/{{userId}}",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add firstname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userJwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"firstname\": \"Johnny\",\r\n    \"birthdate\": \"ignored\",\r\n    \"password\": \"ignored\",\r\n    \"gender\": \"M\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen/{{userId}}",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find johnny after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Citizen is Johnny\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.username).to.eql(\"johnny\");\r",
									"    pm.expect(responseJson.birthdate).to.eql(\"1992-10-01\");\r",
									"    pm.expect(responseJson.residenceCountry).to.eql(\"France\");\r",
									"    pm.expect(responseJson.gender).to.eql(\"M\");\r",
									"    pm.expect(responseJson.firstname).to.eql(\"Johnny\");\r",
									"    pm.expect(responseJson.lastname).to.be.null;\r",
									"    pm.expect(responseJson).to.not.have.property('password');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userJwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostUrl}}/citizen/{{userId}}",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userJwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"birthdate\": \"ignored\",\r\n    \"password\": \"Password1\",\r\n    \"oldPassword\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen/{{userId}}/password",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen",
								"{{userId}}",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete johnny",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userJwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{hostUrl}}/citizen/{{userId}}",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Access control",
			"item": [
				{
					"name": "prepare",
					"item": [
						{
							"name": "Create john",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"if(pm.response.code === 201){\r",
											"    const userId = pm.response.headers.get('location').split('/')[2];\r",
											"    const requestBody = JSON.parse(request.data);\r",
											"    pm.variables.set('userId', userId);\r",
											"    pm.variables.set('username', requestBody.username);\r",
											"    pm.variables.set('password', requestBody.password);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"john.wick\",\r\n    \"firstname\" : \"John\",\r\n    \"lastname\" : \"Wick\",\r\n    \"residenceCountry\": \"France\",\r\n    \"birthdate\": \"1992-10-01\",\r\n    \"password\": \"Azertyui1\",\r\n    \"gender\": \"M\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostUrl}}/citizen",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create john bis",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"if(pm.response.code === 201){\r",
											"    const userId = pm.response.headers.get('location').split('/')[2];\r",
											"    const requestBody = JSON.parse(request.data);\r",
											"    pm.variables.set('userIdBis', userId);\r",
											"    pm.variables.set('usernameBis', requestBody.username);\r",
											"    pm.variables.set('passwordBis', requestBody.password);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"john.wick.bis\",\r\n    \"firstname\" : \"John\",\r\n    \"lastname\" : \"Wick\",\r\n    \"residenceCountry\": \"France\",\r\n    \"birthdate\": \"1992-10-01\",\r\n    \"password\": \"Azertyui1\",\r\n    \"gender\": \"M\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostUrl}}/citizen",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get token for john",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if(pm.response.code === 200){\r",
											"    pm.variables.set(\"userJwtToken\", pm.response.text());\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostUrl}}/citizen/token",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get token for john bis",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if(pm.response.code === 200){\r",
											"    pm.variables.set(\"userJwtTokenBis\", pm.response.text());\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{usernameBis}}\",\r\n    \"password\": \"{{passwordBis}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostUrl}}/citizen/token",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "test",
					"item": [
						{
							"name": "Find john no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error detail is present\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.field).to.be.null;\r",
											"    pm.expect(responseJson.detail).to.eql(\"Invalid authorization header\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostUrl}}/citizen/{{userId}}",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find john expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error detail is present\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.field).to.be.null;\r",
											"    pm.expect(responseJson.detail).to.eql(\"Unauthorized access\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredJohnToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostUrl}}/citizen/{{userId}}",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find john wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error detail is present\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.field).to.be.null;\r",
											"    pm.expect(responseJson.detail).to.eql(\"Unauthorized access\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userJwtTokenBis}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostUrl}}/citizen/{{userId}}",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "clean",
					"item": [
						{
							"name": "Delete john bis",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userJwtTokenBis}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{hostUrl}}/citizen/{{userIdBis}}",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"{{userIdBis}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete john",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userJwtToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{hostUrl}}/citizen/{{userId}}",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Bad updating",
			"item": [
				{
					"name": "prepare",
					"item": [
						{
							"name": "Create john",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"if(pm.response.code === 201){\r",
											"    const userId = pm.response.headers.get('location').split('/')[2];\r",
											"    const requestBody = JSON.parse(request.data);\r",
											"    pm.variables.set('userId', userId);\r",
											"    pm.variables.set('username', requestBody.username);\r",
											"    pm.variables.set('password', requestBody.password);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"john.wick\",\r\n    \"firstname\" : \"John\",\r\n    \"lastname\" : \"Wick\",\r\n    \"residenceCountry\": \"France\",\r\n    \"birthdate\": \"1992-10-01\",\r\n    \"password\": \"Azertyui1\",\r\n    \"gender\": \"M\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostUrl}}/citizen",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create john bis",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"if(pm.response.code === 201){\r",
											"    const userId = pm.response.headers.get('location').split('/')[2];\r",
											"    const requestBody = JSON.parse(request.data);\r",
											"    pm.variables.set('userIdBis', userId);\r",
											"    pm.variables.set('usernameBis', requestBody.username);\r",
											"    pm.variables.set('passwordBis', requestBody.password);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"john.wick.bis\",\r\n    \"firstname\" : \"John\",\r\n    \"lastname\" : \"Wick\",\r\n    \"residenceCountry\": \"France\",\r\n    \"birthdate\": \"1992-10-01\",\r\n    \"password\": \"Azertyui1\",\r\n    \"gender\": \"M\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostUrl}}/citizen",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get token for john",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if(pm.response.code === 200){\r",
											"    pm.variables.set(\"userJwtToken\", pm.response.text());\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostUrl}}/citizen/token",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get token for john bis",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if(pm.response.code === 200){\r",
											"    pm.variables.set(\"userJwtTokenBis\", pm.response.text());\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{usernameBis}}\",\r\n    \"password\": \"{{passwordBis}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostUrl}}/citizen/token",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "test",
					"item": [
						{
							"name": "Find john",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Citizen is John\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.username).to.eql(\"john.wick\");\r",
											"    pm.expect(responseJson.birthdate).to.eql(\"1992-10-01\");\r",
											"    pm.expect(responseJson.residenceCountry).to.eql(\"France\");\r",
											"    pm.expect(responseJson.gender).to.eql(\"M\");\r",
											"    pm.expect(responseJson.firstname).to.eql(\"John\");\r",
											"    pm.expect(responseJson.lastname).to.eql(\"Wick\");\r",
											"    pm.expect(responseJson).to.not.have.property('password');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userJwtToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostUrl}}/citizen/{{userId}}",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try remove username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error detail is present\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.field).to.eql(\"username\");\r",
											"    pm.expect(responseJson.detail).to.eql(\"must not be empty\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userJwtToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"firstname\": \"John\",\r\n    \"lastname\": \"Wick\",\r\n    \"phoneNumber\": \"0606060606\",\r\n    \"gender\": \"M\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostUrl}}/citizen/{{userId}}",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to use john bis username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Error detail is present\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.field).to.eql(\"username\");\r",
											"    pm.expect(responseJson.detail).to.eql(\"already exists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userJwtToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{usernameBis}}\",\r\n    \"firstname\": \"John\",\r\n    \"lastname\": \"Wick\",\r\n    \"gender\": \"M\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostUrl}}/citizen/{{userId}}",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find john no change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Phone number not added\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.username).to.eql(\"john.wick\");\r",
											"    pm.expect(responseJson.birthdate).to.eql(\"1992-10-01\");\r",
											"    pm.expect(responseJson.residenceCountry).to.eql(\"France\");\r",
											"    pm.expect(responseJson.gender).to.eql(\"M\");\r",
											"    pm.expect(responseJson.firstname).to.eql(\"John\");\r",
											"    pm.expect(responseJson.lastname).to.eql(\"Wick\");\r",
											"    pm.expect(responseJson.phoneNumber).to.be.null;\r",
											"    pm.expect(responseJson).to.not.have.property('password');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userJwtToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{hostUrl}}/citizen/{{userId}}",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "clean",
					"item": [
						{
							"name": "Delete john bis",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userJwtTokenBis}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{hostUrl}}/citizen/{{userIdBis}}",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"{{userIdBis}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Can use john bis username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userJwtToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{usernameBis}}\",\r\n    \"firstname\": \"John\",\r\n    \"lastname\": \"Wick\",\r\n    \"gender\": \"M\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{hostUrl}}/citizen/{{userId}}",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete john",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userJwtToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{hostUrl}}/citizen/{{userId}}",
									"host": [
										"{{hostUrl}}"
									],
									"path": [
										"citizen",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Input format control",
			"item": [
				{
					"name": "Create john bad birthdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error detail is present\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.field).to.eql(\"birthdate\");\r",
									"    pm.expect(responseJson.detail).to.eql(\"1992-13-01\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"john.wick\",\r\n    \"firstname\" : \"John\",\r\n    \"lastname\" : \"Wick\",\r\n    \"residenceCountry\": \"France\",\r\n    \"birthdate\": \"1992-13-01\",\r\n    \"password\": \"Azertyui1\",\r\n    \"gender\": \"M\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create john not french",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Error detail is present\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.field).to.eql(\"birthdate\");\r",
									"    pm.expect(responseJson.detail).to.eql(\"Only adults can register\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"john.wick\",\r\n    \"residenceCountry\": \"France\",\r\n    \"birthdate\": \"2020-10-01\",\r\n    \"password\": \"Azertyui1\",\r\n    \"gender\": \"M\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create john not adult",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Error detail is present\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.field).to.eql(\"residenceCountry\");\r",
									"    pm.expect(responseJson.detail).to.eql(\"Only french citizens can register\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"john.wick\",\r\n    \"residenceCountry\": \"German\",\r\n    \"birthdate\": \"1992-10-01\",\r\n    \"password\": \"Azertyui1\",\r\n    \"gender\": \"M\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create john username missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error detail is present\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.field).to.eql(\"username\");\r",
									"    pm.expect(responseJson.detail).to.eql(\"must not be empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"John\",\r\n    \"lastname\" : \"Wick\",\r\n    \"residenceCountry\": \"France\",\r\n    \"birthdate\": \"1992-10-01\",\r\n    \"password\": \"Azertyui1\",\r\n    \"gender\": \"M\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create john username too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error detail is present\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.field).to.eql(\"username\");\r",
									"    pm.expect(responseJson.detail).to.eql(\"must not be more than 32 characters\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"john.wick.john.wick.john.wick.john.wick.john.wick\",\r\n    \"firstname\" : \"John\",\r\n    \"lastname\" : \"Wick\",\r\n    \"residenceCountry\": \"France\",\r\n    \"birthdate\": \"1992-10-01\",\r\n    \"password\": \"Azertyui1\",\r\n    \"gender\": \"M\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create john",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"if(pm.response.code === 201){\r",
									"    const userId = pm.response.headers.get('location').split('/')[2];\r",
									"    const requestBody = JSON.parse(request.data);\r",
									"    pm.variables.set('userId', userId);\r",
									"    pm.variables.set('username', requestBody.username);\r",
									"    pm.variables.set('password', requestBody.password);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"john.wick\",\r\n    \"firstname\" : \"John\",\r\n    \"lastname\" : \"Wick\",\r\n    \"residenceCountry\": \"France\",\r\n    \"birthdate\": \"1992-10-01\",\r\n    \"password\": \"Azertyui1\",\r\n    \"gender\": \"M\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get token for john",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(pm.response.code === 200){\r",
									"    pm.variables.set(\"userJwtToken\", pm.response.text());\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen/token",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create john already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Error detail is present\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.field).to.eql(\"username\");\r",
									"    pm.expect(responseJson.detail).to.eql(\"already exists\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"john.wick\",\r\n    \"firstname\" : \"John\",\r\n    \"lastname\" : \"Wick\",\r\n    \"residenceCountry\": \"France\",\r\n    \"birthdate\": \"1992-10-01\",\r\n    \"password\": \"Azertyui1\",\r\n    \"gender\": \"M\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try use too long username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error detail is present\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.field).to.eql(\"username\");\r",
									"    pm.expect(responseJson.detail).to.eql(\"must not be more than 32 characters\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userJwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"azertyuiopqsdfghjklmwxcvbn0123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen/{{userId}}",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to update password same new",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error detail is present\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.field).to.eql(\"password\");\r",
									"    pm.expect(responseJson.detail).to.eql(\"identical to oldPassword\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userJwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{password}}\",\r\n    \"oldPassword\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen/{{userId}}/password",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen",
								"{{userId}}",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to update password wrong old",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error detail is present\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.field).to.eql(\"oldPassword\");\r",
									"    pm.expect(responseJson.detail).to.eql(\"wrong value\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userJwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{password}}\",\r\n    \"oldPassword\": \"Password1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostUrl}}/citizen/{{userId}}/password",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen",
								"{{userId}}",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete john",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userJwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{hostUrl}}/citizen/{{userId}}",
							"host": [
								"{{hostUrl}}"
							],
							"path": [
								"citizen",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "hostUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "expiredJohnToken",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMDQiLCJleHAiOjE2MzY2MzcyNjJ9.4I_CiIECClOu7tkFWQqbcH0HXnOSMfwcqKwaPQlHswY"
		}
	]
}